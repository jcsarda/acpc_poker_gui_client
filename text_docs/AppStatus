
== The Status of this Application

This application is far from finished, but it's not a hollow shell either.
Here is a description of this application's components that are finished
and which ones still require development.


== Currently Implemented Application Functionality

== As of September 24, 2011

Hand evaluation and chip distribution is implemented, though the latter is not
tested as well as I would like.

A dealer can also be started through the 'start a new game' view. However,
killing the dealer properly in all situations where the browser leaves the page
is not done. This will be fixed once I reinstitute a time limit on player
actions in the dealer. I will have to ask Duane what a suitable time would be
and then display this timeout to the user.

I still have the problem of killing the BackgrounDRb server automatically,
though (unless it can just stay running all the time).



=== As of August 29, 2011

A home screen is displayed upon directing a browser to the server running this
application.  The appearance of this page is almost completely bare, with the
exception of the <b>Join a game</b> button.  By pressing this button, the page
updates with +AJAX+ to display the <b>Join a game</b> view (in fact all page
transitions are done with +AJAX+).  There are two
functional buttons in this view:  <b>2 Player Limit</b> and <b>Go back</b>.
There is also another button viewable labelled 'Hidden', which, as the name
suggests, is meant to be hidden from view before deployment.  The
<b>Go back</b> button displays the initial home screen again.  When the
<b>2 Player Limit</b> button is pressed, a connection to an
<em>ACPC dealer</em> is made (assuming that it and the BackgrounDRb
server is running to keep track of the game state for the app.) on the port
given in the entry field beside the button.  If no port number was given, it uses
+18791+ as the default, which is the port for the first player when the dealer
is given a random seed of 1.  A +Javascript+ alert is presented to the user,
declaring that the app. is trying to connect to a dealer.  Once the connection
is made, the <b>Game Home</b> screen is displayed.  In the event that a
connection is not made, an error is printed, so it will show up in the server
it should instead provide another +Javascript+ alert informing
the user of the error and render the <b>Join a game</b> view with all the
user's information as it was entered.  Once the user makes it to the
<b>Game Home</b> view, all players have connected to the dealer and a hand
has begun.  The view currently display all the game state information
available.  The only pieces of game state information that are still missing
from this view (and the app. as a whole) are:
*  The match name,
*  the maximum number of hands in the match,
*  whether or not the match has ended, and
*  anything related to player stacks and chips

The user is also free to return to the initial home screen at any time by
pressing the <b>Leave this game</b> button.  If the user presses this button,
an alert with be presented asking the user to confirm their decision to
leave the current game.


== Testing
=== As of August 29, 2011

Unit tests are in place for the all the _models_ (except for
+GameCore+, which can only be tested through integration or acceptance tests)
through the RSpec (a testing framework) and Mocha (a mock and stubbing
framework) gems.  They are still in development, but a substantial portion of
business logic functionality already has associated tests.
While everything is in place to test the controllers and views, tests for these
components have not yet been written.  While this is a point of weakness in
this application, it the weakness is mitigated by the fact that nearly all
the logic in the application is contained in the models, which are well tested.

==== Tests currently in place
===== 6 classes, 80 examples, 0 failures, 41 pending

*  DealerCommunication (4 examples, 0 failures)
      it 'lets the caller know if there is not new input from the dealer'
      it 'lets the caller know if there is new input from the dealer'
      it 'lets the caller know if the dealer is ready to receive data'
      it "properly sends a match state string through it's connection"

*  GameDefinition (1 example, 0 failures)
      it "parses all available game definitions properly"

*  GameState (28 examples, 0 failures, 21 pending)
      # Match state strings generated properly for actions #######################
      it "generates call or check matchstate strings correctly"
      it "generates fold matchstate strings correctly"
      it "generates limit raise or bet matchstate strings correctly"
      # Properly reports state ###################################################
      it 'properly reports which player has the dearler button'
         pending
      it 'properly reports which player submitted the big blind'   
      it 'properly reports which player submitted the small blind'
      it 'properly reports which player is next to act'
         pending   
      it 'properly reports which player acted last'
         pending   
      it 'properly reports the pot size'
         pending   
      it "properly reports stack sizes at the beginning of a hand"   
      it "properly resets stack sizes at the beginning of a hand in Doyle's game"
         pending "change the stack sizes, then start a new hand and check that they have reset" 
      it "properly reports the user's hole cards"
         pending   
      it "properly reports the hole cards of the user's opponents"
         pending
      it 'properly reports the betting actions for each player'
         pending
      it 'properly reports the board cards'
         pending
      it 'properly reports the hand number'
         pending
      it "properly reports the user's position"
         pending
      it 'properly reports the last action'
         pending
      it 'properly reports the list of legal actions'
         pending
      it 'properly reports the round number in every round'
         pending
      it 'properly reports the active players'
         pending
      it 'properly reports the maximum number of hands in this match'
         pending
      it "properly reports whether or not it is the user's turn next at the beginning of every round in Texas Hold'em"
      it "correctly reports that the hand has not ended for all rounds in Texas Hold'em"
         pending
      it "correctly reports that the hand has ended when only one player is active"
         pending
      it "correctly reports that the hand has ended when no player is active"
         pending
      it "correctly reports that the hand has ended when there is a showdown"
         pending
      it 'properly reports that the match as ended'
         pending

*  PlayerManager (33 examples, 0 failures, 20 pending)  
      # Properly reports state ###################################################
      it 'properly reports which player has the dearler button'
      it 'properly reports which player submitted the big blind'   
      it 'properly reports which player submitted the small blind'   
      it 'properly reports which player is next to act'
      it 'properly reports which player acted last'
      it 'properly reports the pot size'
         pending
      it "properly reports stack sizes at the beginning of a hand"
         pending
      it "properly resets stack sizes at the beginning of a hand in Doyle's game"
         pending "change the stack sizes, then start a new hand and check that they have reset"
      it "properly reports the user's hole cards"
         pending
      it "properly reports the hole cards of the user's opponents"
         pending   
      it 'properly reports the betting actions for each player'
         pending
      it 'properly reports the board cards'
         pending   
      it 'properly reports the hand number'
         pending
      it "properly reports the user's position"
         pending
      it 'properly reports the last action'
         pending
      it 'properly reports the list of legal actions'
         pending
      it "properly reports the round number for all rounds in Texas Hold'em"   
      it 'properly reports the active players'
         pending   
      it "properly reports whether or not it is the user's turn next at the beginning of every round in Texas Hold'em"   
      it "correctly reports that the hand has not ended for all rounds in Texas Hold'em"   
      it "correctly reports that the hand has ended when only one player is active"   
      it "correctly reports that the hand has ended when no player is active"   
      it "correctly reports that the hand has ended when there is a showdown"   
      it "correctly reports the first player to act for all rounds in Texas Hold'em"   
      it "correctly reports the whether or not the user is the first player to act for all rounds in Texas Hold'em"
      # Updates state based on opponent actions ##################################
      it 'at the beginning of a hand, the current wager should be the big blind for all players except those who submitted a blind'
         pending
      it 'at the beginning of a hand, the current wager for the player who submitted the small blind should be big blind minus small blind'
         pending
      it 'at the beginning of a hand, the current wager for the player who submitted the big blind should be zero'
         pending
      it "updates the current wager faced by all players when a raise or bet is seen"
         pending
      it "updates state based on call or check"
         pending
      it "updates state based on fold"
         pending
      it "updates state based on limit raise or bet"
      it "updates state based on no-limit raise or bet"

*  MatchState (11 examples, 0 failures)]
      it "is the given raw match state if it's empty"
      it "is the given raw match state if it's not labelled a match state"
      it "is nil if the position isn't given in the match state"
      it "is nil if the hand number isn't given in the match state"
      it "is nil if cards aren't given in the match state"
      it "parses every possible action"
      it "parses every possible hole card hand"
      it "parses valid limit match states in all rounds"
      it "parses valid no-limit match states in all rounds"
      it "parses a valid two player final match state"
      it "parses a valid three player final match state"

*  Player (3 examples, 0 failures)]
      it 'reports its attributes correctly'
      it 'reports it is not active if it is all-in'
      it 'reports it is not active if it has folded'


== Documentation
=== As of August 29, 2011

A lot of documentation is finished and in good order, however there is still
some documentation that needs to be added and fixed.  There are still some
old commented out code or out-dated comments that should be removed.

+script/generate_documentation.sh+ is a +BASH+ script that will generate the
documentation for this application and copy it from +doc/+ to
+morrill@gpu.srv.ualberta.ca+ so that it can be displayed on
{my University of Alberta webspace}[http://www.ualberta.ca/~morrill/doc/].


==== YARD Statistics

   Files:          25
   Modules:        11 (    3 undocumented)
   Classes:        13 (    1 undocumented)
   Constants:      19 (    0 undocumented)
   Methods:       180 (   35 undocumented)
    82.51% documented


== High Priority TODO

=== As of October 10, 2011

*  Create an initial user system to manage adding people or bots to games
   *  Add a user selection form to allow the hosting user to manipulate this
   *  Wrap game logic models inside a User class that inherits from an I_User interface
      * This will provide a unified interface to deal with both bots and people. (How do I implement interfaces in Ruby?)
*  (Fixed by October 10, 2011) Fix the bugs in chip distribution

=== As of September 24, 2011

*  Give a time limit to player actions in the dealer (ask Duane what it should be)

*  (Fixed by October 10) When starting the dealer, use a random number for the dealer's random seed. Once this is done, the ports to which players can connect must be communicated to the user and used by the app. itself to connect to the dealer. The port numbers are retrieved by calling gets once on the pipe to the dealer. This produces a string like "<port1> <port2> ...\n".

=== As of August 29, 2011

*  (Fixed by September 24, 2011) Track player stacks and chip movements.  The infrastructure for this is in place, the implementation simply needs to be written.

*  +Javascript+ user input validations with {_LiveValidation_}[http://livevalidation.com/] should be used for all user input fields.

*  (Fixed by September 24, 2011) The buttons and fields that are meant to be hidden should be hidden.

*  More user input should be retrieved, including:
   *  The maximum number of hands in the match,
   *  the name of the game, and
   *  the name of the players.

*  In the event that a connection is not made, when the user tries to connect to a dealer, a +Javascript+ alert informing the user of the error should be given and the <b>Join a game</b> view should be displayed with all the user's information as it was entered.  To do this, there are two options (regardless of its done, +Javascript+ validations should be used, if possible, on the inputs from the user so that errors don't occur frequently):
   * If possible, the +GameRunner+ _worker_ should be started in the +Javascript+ template that is run before the +PlayerActionsController+ +index+ action.  Then if an error is thrown, the alert can be displayed and the page can remain unchanged.
   * When an error is encountered, all the parameters passed from the <b>Join a game</b> view to +PlayerActionsController+ will get passed back to the <b>Join a game</b> view.

*  +View+/+Javascript+ testing should be done.

*  Integration testing should be done.

*  (Fixed by September 24, 2011) Allow the user to start a new dealer instance from the <b>Start a new game</b> view (which already exists).

*  Fix <tt>Internet Explorer 8</tt> +Javascript+ +alert+ problems.



== General TODO
=== As of August 29, 2011

*  Create an +SharedHelpers+ class that takes a couple methods out of +ApplicationDefs+ and +ModelsHelper+, since only definitions should be there.

*  Informative documents, such as this, should have titles separate from their file names.  I have seen from the way the {YARD project}[https://github.com/lsegal/yard] is documented, that it can easily be done with {Markdown}[http://daringfireball.net/projects/markdown/], but it requires another _gem_ and uses a different syntax than RDoc, which I just spent a fair amount of time learning.  I think I should be able to do
      :title: Application Status
   but it does not work for some reason.

*  Diagrams in +doc/diagrams/+ should be embedded in documents that describe each one.  The diagrams should also be made smaller.  The {YARD project}[https://github.com/lsegal/yard] has some very nice diagrams in +docs/images/+ integrated with their documentation, maybe I will try to find out how the diagrams were made and placed in the docs.

*  Move this app's project repository to {GitHub}[https://github.com/] so that its documentation can be hosted on the {RubyDoc.info YARD documentation server}[http://rubydoc.info/#].

*  Make some minor changes to diagrams to account for changes in how +Javascript+ templates are used.

*  Finish creating and fixing documentation (like the comment references in +GameCore+, +GameState+, and +PlayerManager+).

*  Improve application appearance and usability.

*  Generate the documentation on tests in this document with a script that runs all tests, reports the results, and shows each example description.

*  Create a real change log for this app.

*  Treat feature addition requests and bugs in a more formal way with proper documentation.

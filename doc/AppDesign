
== The Design of this Application

While the ACPC Poker GUI Client is currently implemented in Ruby on Rails,
its design should be agnostic of such details. One language or
framework should be transparently swappable with its current implementation.


== Interface to the User

As this is a web application, the browser is the only interface between
the _user_ and the application.


=== Participating in Matches

Users may participate in matches, so users:
*  may _host_ a match by creating a _table_ and invite other users and/or select _bots_ to participate
   *  must inform all _participants_ of the ports that they must to use to connect to the <em>ACPC Dealer</em>
   *  must provide the dealer's match parameters to the other _competitors_ at the table.
*  may accept invitations to matches hosted by other competitors
   *  This application must be informed of the host name and port number it must use to connect to the dealer
*  may leave the table at any time
   *  All background processes related to the match that was exited must end and the dealer must exit
   *  The other participants must be informed that the match has ended abruptly
*  must be notified of the end of the match
*  must see the result of a match they have played through
*  may play matches consisting of at least one hand
*  must see the current state of the match

In addition, the web application must know what the dealer's match parameters are.


=== Playing Hands

Users may participate in matches so they may play hands. Therefore, users:
*  may see the dealer's match parameters
*  may take legal poker actions in the game (call, check, bet, raise, and fold)
   * Only those actions that are legal to take will be available for the user to take
   * may specify the size of the bet or raise, if the game allows variable size bets and/or raises
*  must be notified of the end of the hand
*  must see the result of a hand they have played through


== Starting Bots

If the number of users set to participate in a match is less than the number of
players in the selected game, the host user must specify enought bots to play
in the match as required for the game.
Bots:
*  must be informed of the dealer's match parameters


== Keeping Track of the User's <em>Match State</em>

The user's current match state will be recorded in a database table accessable
from both the web application and game logic.

The web application
*  must create the database table and fill it with the dealer's match parameters

The game logic
*  must connect to the dealer
*  must be run as a background process, since it must a connection to the dealer accross web application requests
*  may read the dealer's match parameters from the database
*  must send actions to the dealer upon request from the web application
*  must receive matchstate strings from the dealer when they are available
*  must record the current match state when a new matchstate string is received from the dealer
